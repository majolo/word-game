{"version":3,"sources":["CreateForm.tsx","List.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["CleanInput","input","toLowerCase","trim","CreateGameForm","props","useState","formValue","setFormValue","shareValue","setShareValue","onSubmit","event","window","location","btoa","preventDefault","type","value","onChange","target","length","href","WordForm","pushItemFunc","List","guessWord","atob","pathname","slice","items","listItems","setListItems","renderItems","push","ListItem","addToList","item","alert","copyList","sort","filter","elem","index","self","indexOf","App","path","className","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gQAOO,SAASA,EAAWC,GACvB,OAAOA,EAAMC,cAAcC,OAGxB,IAAMC,EAA4C,SAAAC,GAAU,IAAD,EAE5BC,mBAAS,IAFmB,mBAEvDC,EAFuD,KAE5CC,EAF4C,OAG1BF,mBAAS,IAHiB,mBAGvDG,EAHuD,KAG3CC,EAH2C,KAc9D,OACI,6BACI,2BAAG,kEACH,0BAAMC,SARd,SAAsBC,GAClBF,EAAeG,OAAOC,SAAWC,KAAKf,EAAWO,KACjDK,EAAMI,mBAOE,+BACI,2BAAOC,KAAK,OAAOC,MAAOX,EAAWY,SAdrD,SAAsBP,GAClBJ,EAAaI,EAAMQ,OAAOF,WAelB,2BAAOD,KAAK,SAASC,MAAM,iBAE9BT,EAAWY,OAAS,GACjB,+CAAoB,uBAAGC,KAAMb,GAAaA,MC5B7Cc,EAAoC,SAAAlB,GAAU,IAAD,EAEpBC,mBAAS,IAFW,mBAE/CC,EAF+C,KAEpCC,EAFoC,KAkBtD,OACI,0BAAMG,SAXV,SAAsBC,GAKlBP,EAAMmB,aAAaxB,EAAWO,IAC9BC,EAAa,IACbI,EAAMI,mBAKF,+BACI,2BAAOC,KAAK,OAAOC,MAAOX,EAAWY,SAjBjD,SAAsBP,GAClBJ,EAAaI,EAAMQ,OAAOF,aA2BrBO,EAA4B,SAAApB,GAErC,IAF8C,EAE1CqB,EAAYC,KAAKd,OAAOC,SAASc,SAASC,MAAM,KAE9CC,EAAQ,CAACJ,GAJ+B,EAKZpB,mBAASwB,GALG,mBAKvCC,EALuC,KAK5BC,EAL4B,KAMxCC,EAAc,GAN0B,cAO1BF,GAP0B,IAO9C,2BAA+B,CAAC,IAArBb,EAAoB,QACvBA,GAASQ,EAIbO,EAAYC,KAAK,kBAAC,EAAD,CAAUC,SAAUjB,KAHjCe,EAAYC,KAAK,kBAAC,EAAD,CAAUV,aAAcY,MATH,8BAe9C,SAASA,EAAUC,GACXA,GAAQX,GACRY,MAAM,mCAAqCP,EAAUV,OAAS,cAGlE,IAAIkB,EAAWR,EAAUF,QACzBU,EAASL,KAAKG,GACdE,EAASC,OACTD,EAAWA,EAASE,QAAO,SAASC,EAAMC,EAAOC,GAC7C,OAAOD,IAAUC,EAAKC,QAAQH,MAElCV,EAAaO,GAGjB,OACI,6BACKN,IAWAE,EAAoC,SAAA9B,GAC7C,OACI,6BACKA,EAAM8B,WC3DJW,MApBf,WACE,IAAIC,EAAOlC,OAAOC,SAASc,SAASC,MAAM,IAE1C,OACE,yBAAKmB,UAAU,OACb,4BAAQA,UAAU,cAChB,kDAGCD,EAAK1B,OAAS,GACX,kBAAC,EAAD,MAEH0B,EAAK1B,OAAS,GACX,kBAAC,EAAD,SCNQ4B,QACW,cAA7BpC,OAAOC,SAASoC,UAEe,UAA7BrC,OAAOC,SAASoC,UAEhBrC,OAAOC,SAASoC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.f7ee1640.chunk.js","sourcesContent":["import React, {useState} from \"react\";\nimport {List} from \"./List\";\n\ninterface CreateGameProps {\n    // pushItemFunc: (item: string) => void;\n}\n\nexport function CleanInput(input: string) {\n    return input.toLowerCase().trim()\n}\n\nexport const CreateGameForm: React.FC<CreateGameProps> = props => {\n\n    const [formValue, setFormValue] = useState('');\n    const [shareValue, setShareValue] = useState('');\n\n    function handleChange(event: any) {\n        setFormValue(event.target.value)\n    }\n\n    function handleSubmit(event: any) {\n        setShareValue( window.location + btoa(CleanInput(formValue)))\n        event.preventDefault();\n    }\n\n    return (\n        <div>\n            <p><small>Enter a word to create a game:</small></p>\n            <form onSubmit={handleSubmit}>\n                <label>\n                    <input type=\"text\" value={formValue} onChange={handleChange} />\n                </label>\n                <input type=\"submit\" value=\"Create Game\" />\n            </form>\n            {shareValue.length > 0 && (\n                <p>Share this link: <a href={shareValue}>{shareValue}</a></p>\n            )}\n        </div>\n\n    );\n}","import React, { useContext, useState } from 'react';\nimport {CleanInput} from \"./CreateForm\";\n\ninterface WordFormProps {\n    pushItemFunc: (item: string) => void;\n}\n\nexport const WordForm: React.FC<WordFormProps> = props => {\n\n    const [formValue, setFormValue] = useState('');\n\n    function handleChange(event: any) {\n        setFormValue(event.target.value)\n    }\n\n    function handleSubmit(event: any) {\n        // Append to parent list of words\n        // Sort the list\n        // If it matches the word minus / then say congrats and how many guesses it took\n\n        props.pushItemFunc(CleanInput(formValue))\n        setFormValue('')\n        event.preventDefault();\n    }\n\n    return (\n        <form onSubmit={handleSubmit}>\n            <label>\n                <input type=\"text\" value={formValue} onChange={handleChange} />\n            </label>\n            {/*<input type=\"submit\" value=\"Submit\" />*/}\n        </form>\n    );\n}\n\ninterface ListProps {\n    // ListItems: string[];\n}\n\nexport const List: React.FC<ListProps> = props => {\n\n    let guessWord = atob(window.location.pathname.slice(11))\n\n    const items = [guessWord]\n    const [listItems, setListItems] = useState(items);\n    const renderItems = []\n    for (const value of listItems) {\n        if (value == guessWord) {\n            renderItems.push(<WordForm pushItemFunc={addToList}/>)\n            continue\n        }\n        renderItems.push(<ListItem ListItem={value}/>)\n    }\n\n    function addToList(item:string) {\n        if (item == guessWord) {\n            alert('Congratulations you got it with ' + listItems.length + ' attempts!');\n        }\n\n        var copyList = listItems.slice()\n        copyList.push(item)\n        copyList.sort()\n        copyList = copyList.filter(function(elem, index, self) {\n            return index === self.indexOf(elem);\n        })\n        setListItems(copyList)\n    }\n\n    return (\n        <div>\n            {renderItems}\n            {/*{listItems}*/}\n        </div>\n    );\n}\n\n\ninterface ListItemProps {\n    ListItem: string;\n}\n\nexport const ListItem: React.FC<ListItemProps> = props => {\n    return (\n        <div>\n            {props.ListItem}\n        </div>\n    );\n}","import React from 'react';\nimport './App.css';\nimport {List} from \"./List\";\nimport {CreateGameForm} from \"./CreateForm\";\n\nfunction App() {\n  let path = window.location.pathname.slice(11)\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <p>\n          Guess The Word Game\n        </p>\n        {path.length > 0 && (\n            <List/>\n        )}\n        {path.length < 1 && (\n            <CreateGameForm/>\n        )}\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}